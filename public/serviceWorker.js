(()=>{var n={featureToggle:{name:"featureToggle",version:1,storeNames:["featureToggles"]}},g=async t=>new Promise((a,o)=>{let e=indexedDB.open(n[t].name,n[t].version);e.onupgradeneeded=async()=>{switch(t){case"featureToggle":await u(e.result)}},e.onsuccess=()=>{a(e.result)},e.onerror=()=>{o(e.error)},e.onblocked=()=>{o(e.error)}});var f={hoge:!0},u=t=>new Promise(async(a,o)=>{let e=t.createObjectStore(n.featureToggle.storeNames[0],{keyPath:"name"});e.transaction.oncomplete=()=>{let r=t.transaction(n.featureToggle.storeNames[0],"readwrite").objectStore(n.featureToggle.storeNames[0]);Object.entries(f).map(([s,i])=>{r.add({name:s,enabled:i})}),a()},e.transaction.onerror=()=>{o(e.transaction.error)}}),m=async()=>new Promise(async(t,a)=>{let o=await g("featureToggle").catch(s=>s instanceof DOMException?s:Promise.reject(s));if(o instanceof Error){console.log(o);return}let r=o.transaction(n.featureToggle.storeNames[0],"readonly").objectStore(n.featureToggle.storeNames[0]).getAll();r.onsuccess=()=>{t(r.result),o.close()},r.onerror=()=>{a(r.error),o.close()}}),p="Dev-Feature-Toggle",l=async t=>{let a=Object.fromEntries(t.headers.entries()),e=(await m()).filter(({enabled:r})=>r).map(({name:r})=>r).join(",");return new Request(t,{headers:{...a,[p]:e}})};self.addEventListener("fetch",t=>{if(!(t instanceof FetchEvent))return;let a=async()=>{let o=t.request.clone(),e=await l(o);return fetch(e)};t.respondWith(a())});var y={};})();
